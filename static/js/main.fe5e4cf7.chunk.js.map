{"version":3,"sources":["components/New Expense/ExpenseForm.js","components/New Expense/NewExpense.js","components/UI Components/Card.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesFilter.js","components/Charts/Chartbar.js","components/Charts/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","App.js","reportWebVitals.js","index.js"],"names":["ExpenseForm","props","useState","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","event","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","className","type","value","onChange","target","min","step","max","onClick","onCancel","NewExpense","isEditing","setIsEditing","enteredExpenseData","id","Math","random","toString","onAddExpense","Card","classes","children","ExpenseDate","month","toLocaleString","day","year","getFullYear","ExpenseItem","ExpensesFilter","selected","onChangeFilter","ChartBar","barFillHeight","maxValue","round","style","height","label","Chart","dataPointValues","dataPoints","map","dataPoint","totalMaximum","ExpensesChart","chartDataPoints","expenses","expense","getMonth","Expenses","filteredYear","setFilteredYear","filteredExpenses","filter","selectedYear","length","DUMMY_EXPENSES","App","setExpenses","prevExpenses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe5e4cf7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport \"./ExpenseForm.css\";\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value);\r\n  };\r\n\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value);\r\n  };\r\n\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    props.onSaveExpenseData(expenseData);\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <label>Title</label>\r\n          <input\r\n            type=\"text\"\r\n            value={enteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Amount</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={enteredAmount}\r\n            onChange={amountChangeHandler}\r\n          />\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <label>Date</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            value={enteredDate}\r\n            onChange={dateChangeHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"new-expense__actions\">\r\n        <button type=\"button\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\">Add Expense</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ExpenseForm;\r\n","import React, { useState } from \"react\";\r\n\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./NewExpense.css\";\r\n\r\nconst NewExpense = (props) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n\r\n  const saveExpenseDataHandler = (enteredExpenseData) => {\r\n    const expenseData = {\r\n      ...enteredExpenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n    props.onAddExpense(expenseData);\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const startEditingHandler = () => {\r\n    setIsEditing(true);\r\n  };\r\n\r\n  const stopEditingHandler = () => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"new-expense\">\r\n      {!isEditing && (\r\n        <button onClick={startEditingHandler}>Add New Expense</button>\r\n      )}\r\n      {isEditing && (\r\n        <ExpenseForm\r\n          onSaveExpenseData={saveExpenseDataHandler}\r\n          onCancel={stopEditingHandler}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewExpense;\r\n","import './Card.css';\r\nconst Card = (props) => {\r\n    const classes = 'card ' + props.className;\r\n\r\n    return <div className={classes}>{props.children}</div>\r\n}\r\n\r\nexport default Card;","import './ExpenseDate.css';\r\n\r\nconst ExpenseDate = (props) => {\r\n  const month = props.date.toLocaleString(\"en-us\", { month: \"long\" });\r\n  const day = props.date.toLocaleString(\"en-us\", { day: \"2-digit\" });\r\n  const year = props.date.getFullYear();\r\n  return (\r\n        <div className=\"expense-date\">\r\n          <div className=\"expense-date__month\">{month}</div>\r\n          <div className=\"expense-date__year\">{year}</div>\r\n          <div className=\"expense-date__day\">{day}</div>\r\n        </div>\r\n  );\r\n}\r\nexport default ExpenseDate;\r\n","\r\nimport React from 'react';\r\n\r\nimport ExpenseDate from './ExpenseDate';\r\nimport Card from '../UI Components/Card';\r\nimport './ExpenseItem.css';\r\n\r\nconst ExpenseItem = (props) => {\r\n  return (\r\n    <Card className='expense-item'>\r\n      <ExpenseDate date={props.date} />\r\n      <div className='expense-item__description'>\r\n        <h2>{props.title}</h2>\r\n        <div className='expense-item__price'>${props.amount}</div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseItem;","import React from \"react\";\r\n\r\nimport \"./ExpenseFilter.css\";\r\n\r\nconst ExpensesFilter = (props) => {\r\n  const dropdownChangeHandler = (event) => {\r\n    props.onChangeFilter(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"expenses-filter\">\r\n      <div className=\"expenses-filter__control\">\r\n        <label>Filter by year</label>\r\n        <select value={props.selected} onChange={dropdownChangeHandler}>\r\n          <option value=\"2022\">2022</option>\r\n          <option value=\"2021\">2021</option>\r\n          <option value=\"2020\">2020</option>\r\n          <option value=\"2019\">2019</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpensesFilter;\r\n","import \"./Chartbar.css\";\r\n\r\nconst ChartBar = (props) => {\r\n  let barFillHeight = \"0%\";\r\n\r\n  if (props.maxValue > 0) {\r\n    barFillHeight = Math.round((props.value / props.maxValue) * 100) + \"%\";\r\n  }\r\n  return (\r\n    <div className=\"chart-bar\">\r\n      <div className=\"chart-bar__inner\">\r\n        <div className=\"chart-bar__fill\" style={{height: barFillHeight}}></div>\r\n\r\n      </div>\r\n      <div className=\"chart-bar__label\">{props.label}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default ChartBar;","import ChartBar from \"./Chartbar\";\r\nimport \"./Chart.css\";\r\nconst Chart = (props) => {\r\n    const dataPointValues = props.dataPoints.map(dataPoint =>dataPoint.value);\r\n    const totalMaximum = Math.max(...dataPointValues);\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => (\r\n        <ChartBar\r\n          key={dataPoint.label}\r\n          value={dataPoint.value}\r\n          maxValue={totalMaximum}\r\n          label={dataPoint.label}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import Chart from '../Charts/Chart';\r\n\r\nconst ExpensesChart = props =>{\r\n    const chartDataPoints = [\r\n    { label: 'Jan', value: 0},\r\n    { label: 'Feb', value: 0},\r\n    { label: 'Mar', value: 0},\r\n    { label: 'Apr', value: 0},\r\n    { label: 'May', value: 0},\r\n    { label: 'June', value: 0},\r\n    { label: 'July', value: 0},\r\n    { label: 'Aug', value: 0},\r\n    { label: 'Sep', value: 0},\r\n    { label: 'Oct', value: 0},\r\n    { label: 'Nov', value: 0},\r\n    { label: 'Dec', value: 0},\r\n    ];\r\n    for( const expense of props.expenses){\r\n        const expenseMonth = expense.date.getMonth();\r\n        chartDataPoints[expenseMonth].value += expense.amount;\r\n    }\r\n    return <Chart dataPoints={chartDataPoints} />\r\n}\r\n\r\nexport default ExpensesChart;","import \"./Expenses.css\";\r\nimport { useState } from \"react\";\r\nimport Card from \"../UI Components/Card\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport ExpensesChart from \"./ExpensesChart\";\r\nconst Expenses = (props) => {\r\n  const [filteredYear, setFilteredYear] = useState(\"2020\");\r\n\r\n  const filterChangeHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n  const filteredExpenses = props.expenses.filter((expense) => {\r\n    return expense.date.getFullYear().toString() === filteredYear;\r\n  });\r\n  return (\r\n    <div>\r\n      <Card className=\"expenses\">\r\n        <ExpensesFilter\r\n          selected={filteredYear}\r\n          onChangeFilter={filterChangeHandler}\r\n        />\r\n        <ExpensesChart expenses={filteredExpenses} />\r\n        {filteredExpenses.length === 0 ? (\r\n          <p>No Expenses Found</p>\r\n        ) : (\r\n          filteredExpenses.map((expenses) => (\r\n            <ExpenseItem\r\n              key={expenses.id}\r\n              title={expenses.title}\r\n              amount={expenses.amount}\r\n              date={expenses.date}\r\n            />\r\n          ))\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default Expenses;\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport NewExpense from \"./components/New Expense/NewExpense\";\r\nimport Expenses from \"./components/Expenses/Expenses\";\r\nconst DUMMY_EXPENSES = [\r\n  {\r\n    id: \"e1\",\r\n    title: \"New book\",\r\n    amount: 99.31,\r\n    date: new Date(2020, 10, 1),\r\n  },\r\n  { id: \"e2\", title: \"New TV\", amount: 869.92, date: new Date(2021, 12, 17) },\r\n  {\r\n    id: \"e3\",\r\n    title: \"New Chair\",\r\n    amount: 294.67,\r\n    date: new Date(2021, 2, 28),\r\n  },\r\n  {\r\n    id: \"e4\",\r\n    title: \"New Desk\",\r\n    amount: 450,\r\n    date: new Date(2021, 5, 12),\r\n  },\r\n];\r\nconst App = () => {\r\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\r\n  const addExpenseHandler = (expense) => {\r\n    setExpenses((prevExpenses)=>{\r\n      return [expense, ...prevExpenses];\r\n    });\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <NewExpense onAddExpense={addExpenseHandler} />\r\n      <Expenses expenses={expenses} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}